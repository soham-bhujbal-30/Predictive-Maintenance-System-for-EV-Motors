/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body - CAN Receiver on a real bus
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root of this project. If no LICENSE file comes with this software,
  * it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/

#include "main.h"
#include <string.h>

/* Private includes ----------------------------------------------------------*/

/* USER CODE BEGIN Includes */

/* USER CODE END Includes */


/* Private typedef -----------------------------------------------------------*/

/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/

/* USER CODE BEGIN PD */

#define CAN_DATA_LENGTH 8      // Max 8 bytes for Classic CAN data payload
#define TEST_MESSAGE_ID 0x123  // A standard ID for our test message

// Define the LED pin based on the STM32F4-Discovery board

#define RX_LED_Pin  GPIO_PIN_15
#define RX_LED_GPIO_Port GPIOD

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/

/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

CAN_HandleTypeDef hcan2; // Handle for CAN2 peripheral (our receiver)

/* USER CODE BEGIN PV */

CAN_RxHeaderTypeDef   RxHeader;
uint8_t               RxData[CAN_DATA_LENGTH];
volatile uint8_t      received_message_flag = 0; // Flag to indicate a message has been received

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_CAN2_Init(void);

/* USER CODE BEGIN PFP */

void CAN_Filter_Config(CAN_HandleTypeDef *hcan, uint32_t fifo_assignment, uint32_t filter_bank);
HAL_StatusTypeDef CAN_Receive_Message(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/

/* USER CODE BEGIN 0 */



/**
  * @brief  Configures the CAN filter to accept all standard ID messages into FIFO0.
  * @param  hcan: Pointer to the CAN_HandleTypeDef for the specific CAN instance.
  * @param  fifo_assignment: CAN_RX_FIFO0 or CAN_RX_FIFO1.
  * @param  filter_bank: The filter bank number (14 to 27 for CAN2 on F407).
  * @retval None
  */

void CAN_Filter_Config(CAN_HandleTypeDef *hcan, uint32_t fifo_assignment, uint32_t filter_bank)
{
    CAN_FilterTypeDef  sFilterConfig;
    sFilterConfig.FilterBank = filter_bank;
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
    sFilterConfig.FilterIdHigh = 0x0000;
    sFilterConfig.FilterIdLow = 0x0000;
    sFilterConfig.FilterMaskIdHigh = 0x0000; // Accept anything
    sFilterConfig.FilterMaskIdLow = 0x0000;
    sFilterConfig.FilterFIFOAssignment = fifo_assignment;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 14;

    if (HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK)
    {
        Error_Handler();
    }
}

/**
  * @brief  Receives a CAN message from a specified FIFO.
  * @param  hcan: Pointer to the CAN_HandleTypeDef for the receiving CAN instance.
  * @param  RxFifo: The receive FIFO from which to get the message (CAN_RX_FIFO0 or CAN_RX_FIFO1).
  * @param  pRxHeader: Pointer to a CAN_RxHeaderTypeDef structure to store the received header.
  * @param  pRxData: Pointer to an array to store the received data.
  * @retval HAL_StatusTypeDef: HAL_OK if a message was received, HAL_ERROR otherwise.
  */

HAL_StatusTypeDef CAN_Receive_Message(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
    if (HAL_CAN_GetRxMessage(hcan, RxFifo, pRxHeader, pRxData) != HAL_OK)
    {
        return HAL_ERROR;
    }
    return HAL_OK;
}

/**
  * @brief  Rx FIFO 0 Message Pending callback.
  * This is our interrupt service routine for CAN2.
  * @param  hcan: pointer to a CAN_HandleTypeDef structure
  * @retval None
  */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
    if (hcan->Instance == CAN2)
    {
        if (CAN_Receive_Message(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
        {
            // Message received successfully, set the flag and blink the LED
            received_message_flag = 1;
            HAL_GPIO_TogglePin(RX_LED_GPIO_Port, RX_LED_Pin);
        }
        else
        {
            Error_Handler();
        }
    }
}



/* USER CODE END 0 */

/**

  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */



  /* Configure the system clock */

  SystemClock_Config();

  /* USER CODE BEGIN SysInit */



  /* USER CODE END SysInit */



  /* Initialize all configured peripherals */

  MX_GPIO_Init();
  MX_CAN2_Init(); // Initialize CAN2

  /* USER CODE BEGIN 2 */


  // Configure CAN filter for CAN2

  CAN_Filter_Config(&hcan2, CAN_RX_FIFO0, 14); // Use filter bank 14 for CAN2

  // Start the CAN2 peripheral
  if (HAL_CAN_Start(&hcan2) != HAL_OK)
  {
    /* CAN2 Start Error */
    Error_Handler();
  }



  // Activate CAN notification for Rx FIFO 0 message pending on CAN2

  if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
  {
    /* CAN2 Notification Error */
    Error_Handler();
  }

  /* USER CODE END 2 */


  /* Infinite loop */

  /* USER CODE BEGIN WHILE */

  while (1)
  {

    /* USER CODE END WHILE */

    // Check if a message was received (flag set by interrupt)

    if (received_message_flag)
    {
        // For testing, you can set a breakpoint here and inspect RxHeader and RxData
        // The data in RxData should match the data sent by the transmitter.
         HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
         HAL_Delay(200);
         HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
         HAL_Delay(200);
         // This block is only executed once per message received

        // You can add data processing or display update logic here.

        // Example: You would parse RxData here to get your sensor values

        received_message_flag = 0; // Clear the flag after processing
    }

    HAL_Delay(50); // Small delay to prevent busy-waiting
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */

}



/**
  * @brief System Clock Configuration
  * @retval None

  */

// This function is generated by STM32CubeMX. DO NOT MODIFY MANUALLY.
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage

  */

  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters

  * in the RCC_OscInitTypeDef structure.

  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks

  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }

}

/**
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */

// This function is generated by STM32CubeMX. DO NOT MODIFY MANUALLY.

static void MX_CAN2_Init(void)
{

  /* USER CODE BEGIN CAN2_Init 0 */

  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */

  hcan2.Instance = CAN2;
  hcan2.Init.Prescaler = 6;
  hcan2.Init.Mode = CAN_MODE_NORMAL;
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
  hcan2.Init.TimeTriggeredMode = DISABLE;
  hcan2.Init.AutoBusOff = DISABLE;
  hcan2.Init.AutoWakeUp = DISABLE;
  hcan2.Init.AutoRetransmission = ENABLE;
  hcan2.Init.ReceiveFifoLocked = DISABLE;
  hcan2.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
  {
    Error_Handler();
  }

  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}

/**

  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */

// This function is generated by STM32CubeMX. DO NOT MODIFY MANUALLY.

static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* USER CODE BEGIN MX_GPIO_Init 0 */

  /* USER CODE END MX_GPIO_Init 0 */

  /* GPIO Ports Clock Enable */

  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE(); // Enable clock for GPIOD to control the LED
  __HAL_RCC_GPIOB_CLK_ENABLE(); // For CAN2 TX/RX (PB5, PB6)

  /* USER CODE BEGIN MX_GPIO_Init 1 */

  /* USER CODE END MX_GPIO_Init 1 */

  /*Configure GPIO pin Output Level */

  HAL_GPIO_WritePin(GPIOD, RX_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD15 */

  GPIO_InitStruct.Pin = RX_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init 2 */

  /* USER CODE END MX_GPIO_Init 2 */
}

/* USER CODE BEGIN 4 */



/* USER CODE END 4 */



/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */

void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  while(1)
  {
      // If an error occurs, the MCU will halt here (or blink an LED)
  }

  /* USER CODE END Error_Handler_Debug */
}



#ifdef  USE_FULL_ASSERT

/**
  * @brief  Reports the name of the source file and the source line number
  * where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */

void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}

#endif /* USE_FULL_ASSERT */