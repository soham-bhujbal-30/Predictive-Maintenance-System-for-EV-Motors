/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body - CAN Transmitter on a real bus with LED feedback
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root of this project. If no LICENSE file comes with this software,
  * it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include <string.h>

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define CAN_DATA_LENGTH 8      // Max 8 bytes for Classic CAN data payload
#define TEST_MESSAGE_ID 0x123  // A standard ID for our test message

// Define the LED pins based on the STM32F4-Discovery board
#define GREEN_LED_Pin  GPIO_PIN_12
#define GREEN_LED_GPIO_Port GPIOD
#define RED_LED_Pin    GPIO_PIN_13
#define RED_LED_GPIO_Port GPIOD
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
CAN_HandleTypeDef hcan1; // Handle for CAN1 peripheral (our transmitter)

/* USER CODE BEGIN PV */
uint8_t               TxData[CAN_DATA_LENGTH]; // Array to hold data to transmit
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_CAN1_Init(void);

/* USER CODE BEGIN PFP */
HAL_StatusTypeDef CAN_Transmit_Message(CAN_HandleTypeDef *hcan, uint32_t StdId, uint8_t *pData, uint8_t DataLength);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/**
  * @brief  Transmits a CAN message.
  * @param  hcan: Pointer to the CAN_HandleTypeDef for the transmitting CAN instance.
  * @param  StdId: Standard Identifier of the message.
  * @param  pData: Pointer to the array containing the data to transmit.
  * @param  DataLength: Length of the data in bytes (0 to 8).
  * @retval HAL_StatusTypeDef: HAL_OK if successful, HAL_ERROR otherwise.
  */
HAL_StatusTypeDef CAN_Transmit_Message(CAN_HandleTypeDef *hcan, uint32_t StdId, uint8_t *pData, uint8_t DataLength)
{
    CAN_TxHeaderTypeDef   TxHeader;
    uint32_t              TxMailbox; // To store the transmission mailbox used

    // Prepare TxHeader
    TxHeader.StdId = StdId;
    TxHeader.ExtId = 0x00;          // Not used for Standard ID
    TxHeader.RTR = CAN_RTR_DATA;    // Data frame
    TxHeader.IDE = CAN_ID_STD;      // Standard ID format
    TxHeader.DLC = DataLength;      // Data length code
    TxHeader.TransmitGlobalTime = DISABLE; // Disable timestamp transmission

    // Check if a transmit mailbox is free
    if (HAL_CAN_GetTxMailboxesFreeLevel(hcan) > 0)
    {
        // Add the message to the transmit mailbox
        if (HAL_CAN_AddTxMessage(hcan, &TxHeader, pData, &TxMailbox) != HAL_OK)
        {
            return HAL_ERROR; // Transmission failed
        }
        return HAL_OK; // Transmission initiated successfully
    }
    return HAL_ERROR; // No free mailbox
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_CAN1_Init(); // Initialize CAN1
  /* USER CODE BEGIN 2 */

  // Start the CAN peripheral
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
  {
    /* CAN1 Start Error */
    Error_Handler();
  }

  // Fill initial TxData with some values
  for (int i = 0; i < CAN_DATA_LENGTH; i++)
  {
      TxData[i] = i; // Example data: 0, 1, 2, ..., 7
  }

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    // Attempt to transmit a CAN message from CAN1
    HAL_StatusTypeDef transmit_status = CAN_Transmit_Message(&hcan1, TEST_MESSAGE_ID, TxData, CAN_DATA_LENGTH);

    if (transmit_status == HAL_OK)
    {
        // Transmission initiated successfully - blink green LED
        HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
        HAL_Delay(50); // Keep LED on for a short time
        HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
    }
    else
    {
        // Transmission failed (e.g., no free mailbox) - blink red LED
        HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
        HAL_Delay(50); // Keep LED on for a short time
        HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);

        // You might want to delay here to prevent constant blinking on failure
        HAL_Delay(100);
    }

    // Increment data for the next transmission
    for (int i = 0; i < CAN_DATA_LENGTH; i++)
    {
        TxData[i]++;
    }

    // Main delay between transmission attempts
    HAL_Delay(400); // Wait before the next attempt, making the total delay around 500ms
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
// This function is generated by STM32CubeMX. DO NOT MODIFY MANUALLY.
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
// This function is generated by STM32CubeMX. DO NOT MODIFY MANUALLY.
static void MX_CAN1_Init(void)
{

  /* USER CODE BEGIN CAN1_Init 0 */

  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
  hcan1.Init.Prescaler = 6;
  hcan1.Init.Mode = CAN_MODE_NORMAL;
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
  hcan1.Init.TimeTriggeredMode = DISABLE;
  hcan1.Init.AutoBusOff = DISABLE;
  hcan1.Init.AutoWakeUp = DISABLE;
  hcan1.Init.AutoRetransmission = ENABLE;
  hcan1.Init.ReceiveFifoLocked = DISABLE;
  hcan1.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
// This function is generated by STM32CubeMX. DO NOT MODIFY MANUALLY.
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* USER CODE BEGIN MX_GPIO_Init 0 */

  /* USER CODE END MX_GPIO_Init 0 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE(); // Enable clock for GPIOD to control LEDs

  /* USER CODE BEGIN MX_GPIO_Init 1 */

  /* USER CODE END MX_GPIO_Init 1 */

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init 2 */

  /* USER CODE END MX_GPIO_Init 2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  while(1)
  {
      // Blink the Red LED continuously on a hard error
      HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
      HAL_Delay(200);
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  * where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
